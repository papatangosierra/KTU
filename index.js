// Kodansha Indesign utility panel// Author: Paul Starr// Date: June 2018/* Create an instance of CSInterface. */var csInterface = new CSInterface();var counter = 0;var KTUAcronym = [		"KTU Technical Undersecretary",		"KTU Task Underling",		"KTU Typographical Unifier",		"KTU Tremendous Undertaking",		"KTU Trusts U",		"KTU Tuning Utility",		"KTU Textual Underwriter",		"KTU Translation Unimatrix",		"KTU Turnt Up",	];/* Insert random acronym in #acronym tag */$("h2#acronym").text(KTUAcronym[Math.floor(Math.random() * KTUAcronym.length)]);/* GREP AUTOMATIONS *//* Add/reveal Section */$("h3#findreplaceh3").on("click", function () {	$("div#findreplace").slideToggle();})/* GREP: Fix Ellipses *//* Display tooltip on <li> mouseover */$("li#ellipses").mouseenter(	function () {		$("div#tooltip").html('<p>Replace all instances of three period characters with a single ellipsis character.</p>')	})	$("li#ellipses").mouseleave(	function () {		$("div#tooltip").html('')	})/* Call fixEllipses() in the host script */$("#ellipses").click( function () {		csInterface.evalScript("fixEllipses()", function (result) {			var foundItemsReport = JSON.parse(result);			$("#findresults").val(jsyaml.safeDump(foundItemsReport))		})    })/* GREP: Unserif bad "I" characters *//* Display tooltip on <li> mouseover */$("li#unserif").mouseenter(	function () {		$("div#tooltip").html('<p>Change all instances of uppercase "I" character that are not the personal pronoun to lowercase "i".</p>')	})	$("li#unserif").mouseleave(	function () {		$("div#tooltip").html('')	})/* Call fixUnserif() in the host script */$("#unserif").click( function () {		csInterface.evalScript("fixUnserif()", function (result) {			var foundItemsReport = JSON.parse(result);			$("#findresults").val(jsyaml.safeDump(foundItemsReport))		})    })/* GREP: Fix apostrophe direction on "'cause" and "'sup" */$("li#cause").mouseenter(	function () {		$("div#tooltip").html('<p>Change incorrect left single quote characters (&lsquo;) preceding contractions &rsquo;cause, &rsquo;cos, &rsquo;til, &rsquo;em, and &rsquo;sup to apostrophe.</p>')	})	$("li#cause").mouseleave(	function () {		$("div#tooltip").html('')	})/* Call fixCause() in the host script */$("#cause").click( function () {		csInterface.evalScript("fixCause()", function (result) {			var foundItemsReport = JSON.parse(result);			$("#findresults").val(jsyaml.safeDump(foundItemsReport))		})    })/* GREP: Fix unserifed personal pronoun "I" characters */$("li#serif").mouseenter(	function () {		$("div#tooltip").html('<p>Change incorrectly unserifed "I" characters to the serifed version in Comiccrazy. (Comiccrazy uses the pipe character | to generate a serifed I.)</p>')	})	$("li#serif").mouseleave(	function () {		$("div#tooltip").html('')	})/* Call fixSerif() in the host script */$("#serif").click( function () {		csInterface.evalScript("fixSerif()", function (result) {			var foundItemsReport = JSON.parse(result);			$("#findresults").val(jsyaml.safeDump(foundItemsReport))		})    })/* GREP: Make ordinals superscript */$("li#ordinals").mouseenter(	function () {		$("div#tooltip").html('<p>Make ordinal letters following numbers into superscript versions of themselves, across all fonts.</p>')	})	$("li#ordinals").mouseleave(	function () {		$("div#tooltip").html('')	})/* Call fixOrdinals() in the host script */$("#ordinals").click( function () {		csInterface.evalScript("fixOrdinals()", function (result) {			var foundItemsReport = JSON.parse(result);			$("#findresults").val(jsyaml.safeDump(foundItemsReport))		})    })/* END GREP AUTOMATIONS *//* PAGE NUMBERING & SETUP TOOLS *//* Add/reveal Section */$("h3#pagetoolsh3").on("click", function () {	$("div#pagetools").slideToggle();})/* Flip Book*/$("li#flipbook").mouseenter(	function () {		$("div#tooltip").html('<p>Reverse both spread order and binding direction, effectively flipping book.</p>')	})	$("li#flipbook").mouseleave(	function () {		$("div#tooltip").html('')	})/* Call reverseOrderAndBindingDirection() in host script*/$("li#flipbook").click( function () {		csInterface.evalScript("reverseOrderAndBindingDirection()")    })/* Export Individual Pages *//* Display Tooltip */$("li#exportindiv").mouseenter(	function () {		$("div#tooltip").html('<p>Export individual PDFs of the the specified page numbers. Separate page numbers with a space.</p>')	})	$("li#exportindiv").mouseleave(	function () {		$("div#tooltip").html('')	})	/* Pass form contents as argument to exportIndividualPages() in host script*/$('form').submit( function (event) {		event.preventDefault();        var pageNumbers = $('input').val().split(' '); // Split page numbers into an array for validation        for (var i=0;i < pageNumbers.length; i++) {            if (/\D/g.test(pageNumbers[i])) { // if any of the page numbers given is not a digit                alert('One or more of the page numbers you gave is not a digit. This is bad.')                            }         }		console.log('string to evalScript is:' + 'exportIndividualPages("' + $('input').val() + '")' )		csInterface.evalScript('exportIndividualPages("' + $('input').val() + '")')    });/* END PAGE NUMBERING & SETUP TOOLS *//* OBJECT TOOLS *//* Add/reveal Section */$("h3#objecth3").on("click", function () {	$("div#object").slideToggle();})// Unlock All Items$("li#unlockall").mouseenter(	function () {		$("div#tooltip").html('<p>Unlock all items in document.</p>')	})	$("li#unlockall").mouseleave(	function () {		$("div#tooltip").html('')	});	$("li#unlockall").click( function () {		csInterface.evalScript("unlockAllItems()")    });/* END OBJECT TOOLS *//* SCRIPT TOOLS */$("li#makescript").mouseenter(	function () {		$("div#tooltip").html('<p>Generate a script template from all text frames on the Dialog layer. Use this to generate a script template to be filled by the translator.</p>')	})$("li#makescript").mouseleave(	function () {		$("div#tooltip").html('')	});$("li#makescript").click(getDialogText);function getDialogText() {    var js = "getTextStructure('Dialog')";    var newCSInterface = new CSInterface();    var allDialogText = newCSInterface.evalScript(js, function (result) {        $("textarea#scriptyaml").val(jsyaml.safeDump(JSON.parse(result)))    });}$("li#updatefromscript").mouseenter(	function () {		$("div#tooltip").html('<p>Update the current spread with text from the script.</p>')	})$("li#updatefromscript").mouseleave(	function () {		$("div#tooltip").html('')	});$("li#updatefromscript").click(setDialogTextOfSpread)function setDialogText() {    var newCSInterface = new CSInterface();    var allText = jsyaml.load($("textarea#scriptyaml").val()) // have to use .val instead of .text for textareas    for (var page in allText) {        if (allText.hasOwnProperty(page)) { // the hasOwnProperty logic is to avoid iterating over attributes inherited from parent objects            for (var panel in allText[page]) {                if (allText[page].hasOwnProperty(panel)) {                    // var js = "setTextFrameContents('" + page + "','" + panel + "','" + allText[page][panel] + "')" // BUG BUG BUG: this very fragile string totally breaks if there are any ' characters in the panel text.                    if (allText[page][panel].includes("'")) {                        var js = 'setTextFrameContents("' + page + '","' + panel + '","' + allText[page][panel] + '")'                    } else {                        var js = "setTextFrameContents('" + page + "','" + panel + "','" + allText[page][panel] + "')"                    }                    newCSInterface.evalScript(js, function (result) { console.log(result) })                }            }        }    }}function setContentsOfFrame(page, frame, contents) {    var newCSInterface = new CSInterface();    // var js = "setTextFrameContents('" + page + "','" + frame + "','" + allText[page][panel] + "')" // BUG BUG BUG: this very fragile string totally breaks if there are any ' characters in the panel text.    if (contents.includes("'")) {        var js = 'setTextFrameContents("' + page + '","' + frame + '","' + contents + '")'    } else {        var js = "setTextFrameContents('" + page + "','" + frame + "','" + contents + "')"    }    newCSInterface.evalScript(js, function (result) { console.log(result) })}// This function parses out the text of the YAML script and updates the text boxes ONLY FOR THE CURRENTLY ACTIVE SPREAD// This is desirable functionality since updating the text frames of the entire document can cause InDesign to hang for// an indeterminate amount of time, and since the letterer is going to have to be sanity-checking and styling each page// manually ANYWAY, this leads to a useful workflow, with one-click-per-page populating of text fields.function setDialogTextOfSpread() {    var newCSInterface = new CSInterface();    var allText = jsyaml.load($("textarea#scriptyaml").val()) // have to use .val instead of .text for textareas    newCSInterface.evalScript('getCurrentSpreadPages()', function (result) {        var currentPages = JSON.parse(result);        $("textarea#scriptyaml").val(currentPages);        for (var i=0; i < currentPages.length; i++) {            for (var frame in allText[currentPages[i]]) {                if (allText[currentPages[i]].hasOwnProperty(frame)) {                    setContentsOfFrame(currentPages[i], frame, allText[currentPages[i]][frame])                }            }        }    })}//setInterval( function () {//    getDialogText();//    }, 5000//)